generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum USER_TYPES {
  user
  admin
}

enum FREQUENCY {
  monthly
  yearly
  quarterly
  biannually
  unlimited
}

enum REFUND_STATUS {
  PERNDING
  SUCCESS
  CANCELED
}

model Country {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  ISOCode   String  @unique
  name      String
  phoneCode String  @unique
  User      User[]
  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  globalPrice     Float
  egPrice         Float
  frequency       FREQUENCY
  features        String[]
  qeriesCount     Int           @default(0)
  isActive        Boolean       @default(true)
  isDeleted       Boolean       @default(false)
  stripeProductId String?
  users           User[]
  Transaction     Transaction[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]
}

model GoogleData {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  sub            String
  name           String
  given_name     String
  family_name    String
  picture        String
  email          String  @unique
  email_verified Boolean
  User           User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String     @unique
  password         String?
  phone            String?
  speciality       String?
  companyName      String?
  paidUser         Boolean    @default(false)
  activeUntil      DateTime?
  role             USER_TYPES @default(user)
  emailVerified    Boolean    @default(false)
  phoneVerified    Boolean    @default(false)
  autoRenewal      Boolean    @default(false)
  code             String?
  socialProvider   String?
  isBlocked        Boolean?   @default(false)
  isDeleted        Boolean?   @default(false)
  Plan             Plan?      @relation(fields: [planId], references: [id])
  planId           String?    @db.ObjectId
  stripeCustomerId String?
  paymentMethodIds String[]

  Country   Country? @relation(fields: [countryId], references: [id])
  countryId String?  @db.ObjectId

  googleData   GoogleData? @relation(fields: [googleDataId], references: [id])
  googleDataId String?     @db.ObjectId

  Transaction  Transaction[]
  Subscription Subscription[]
  Refund       Refund[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  File      File[]
  Chat      Chat[]

  @@index([name, email, phone, paidUser])
}

model Transaction {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  paymentMethod String
  stripeSession Json
  tran_ref      String
  amount        Float
  currency      String
  isDeleted     Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  plan   Plan   @relation(fields: [planId], references: [id])
  planId String @db.ObjectId

  Subscription Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate            DateTime @default(now())
  endDate              DateTime
  totalQueries         Int
  usedQuries           Int      @default(0)
  isActive             Boolean  @default(false)
  isVerified           Boolean  @default(false)
  price                Float
  user                 User     @relation(fields: [userId], references: [id])
  userId               String   @db.ObjectId
  stripeSession        Json?
  stripeScpscriptionId String?
  isDeleted            Boolean  @default(false)

  plan   Plan   @relation(fields: [planId], references: [id])
  planId String @db.ObjectId

  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String?      @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  reviewerName     String
  reviewerPosition String
  reviewerImage    String
  content          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StripeWebhook {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  webhookData Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Refund {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  paymentIntentId String        @unique
  chargeId        String        @unique
  refundAmount    Int
  data            Json
  refundStatus    REFUND_STATUS @default(PERNDING)

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([paymentIntentId, chargeId])
}

model File {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  type     String
  ETag     String
  Location String
  url      String
  key      String
  bucket   String

  User   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, url])
}

enum CHAT_TYPES {
  GENERAL
  EVIDENCE_BASED
  DIAGNOSTIC
}

model Chat {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  type     CHAT_TYPES @default(GENERAL)
  title    String     @default("New Chat")
  messages Json[]     @default([])

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User            User              @relation(fields: [userId], references: [id])
  userId          String            @db.ObjectId
  CasesEvaluation CasesEvaluation[]

  @@index([userId, id])
}

model CasesEvaluation {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  evaluations Json[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String @db.ObjectId
}
